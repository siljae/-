현재 시각 조회 NOW, SYSDATE
  NOW() : 트랜젝션이 시작될 때의 현재 날짜와 시간 반환, 트랜젝션 내에서 여러 번 호출해도 값이 동일
  SYSDATE : 트랜젝션 내에서 호출 될 때 마다 그 시점의 현재 날짜와 시간 반환

날짜와 시간 포맷(DATE_FORMAT, STR_TO_DATE)
  %Y : 4자리 연도
  %m : 2자리 숫자 표시의 월 (01 ~ 12)
  %d : 2자리 숫자 표시의 일자 (01 ~ 31)
  %H : 2자리 숫자 표시의 시 (00 ~ 23)
  %i : 2자리 숫자 표시의 분 (00 ~ 59)
  %s : 2자리 숫자 표시의 초 (00 ~ 59)

날짜와 시간의 연산(DATE_ADD, DATE_SUB)
  YEAR : 연도
  MONTH : 월
  DAY : 일
  HOUR : 시
  MINUTE : 분
  SECOND : 초
  MICROSECOND : 마이크로초
  QUARTER : 분기
  WEEK : 주

GROUP BY 문자열 결합(GROUP_CONCAT)
  SEPARATOR : 결합할 값들 사이에 구분자 지정 옵션

CASE WHEN ... THEN ... END
  SWITCH 문과 같은 구문
  예시
      SELECT emp_no, first_name,
        CASE gender
          WHEN 'M' THEN 'Man'
          WHEN 'F' THEN 'Woman'
          ELSE 'Unknown'
        END AS gender
      FROm emplyees
      LIMIT 10;

타입의 변환
  CAST(), CONVERT()

이진값과 16진수 문자열(Hex String) 변환
  HEX(), UNHEX()

암호화 및 해시 함수
  SHA() : 비대칭형 암호화 알고리즘 SHA-1 암호화 알고리즘 사용, 결과로 160비트(20바이트) 해시 값을 반환
  SHA2() : SHA() 함수보다 더 강력한 알고리즘, 결과로 224비트 ~ 512비트 암호화 알고리즘을 사용해 생성된 해시 값을 반환
  MD5() : 메시지 다이제스트(Mewssage Digest) 알고리즘을 사용해 128비트(16바이트) 해시 값을 반환  
  
  MD5() 는 CHAR(32)
  SHA() 는 CHAR(40)
  를 필요로 한다

  이 함수들의 출력 값은 16진수 문자열 형태이기 때문에 저장하려면 저장 공간이 각각 20바이트와 16바이트의 두 배가 필요하다
  저장 공간을 원래의 16바이트와 20바이트로 줄이고 싶다면 CHAR 또는 VARCHAR 타입이 아닌 BINARY 또는 VARBINARY 형태의 타입에 UNHEX() 함수를 이용해 이진 값으로 변환해서 저장
  16진수 문자열로 다시 되돌릴 때는 HEX() 함수를 이용하면 된다

처리 대기(SLEEP)
  SLEEP() : 레코드의 건수만큼 SLEEP() 함수를 호출

벤치마크(BENCHMARK)
  BENCHMARK() : 디버깅이나 간단한 함수의 성능 테스트용으로 아주 유용한 함수
  첫번 째 인자 : 반복할 횟수
  두번 째 인자 : 반복해서 실행할 표현식(반드시 스칼라값)

IP 주소 변환(INET_ATON, INET_NTOA)

JSON 포맷(JSON_PRETTY)
JSON 필드 크기(JSON_STORAGE_SIZE)
JSON 필드 추출(JSON_EXTRACT)
JSON 오브젝트 포함 여부 확인(JSON_CONTAINS)
JSON 칼럼으로 집계(JSON_OBJECTAGG & JSON_ARRAYAGG)
JSON 데이터를 테이블로 변환(JSON_TABLE)


SELECT 절 처리 순서
  FROM
  JOIN
  WHERE
  GROUP BY
  HAVING
  SELECT
  ORDER BY
  LIMIT/OFFSET

인덱스를 사용하기 위한 기본 규칙
  인덱스는 칼럼의 값을 아무런 변환 없이 B-Tree에 정렬된 인덱스 이용

DISTINCT : 중복 값 제거
LIMIT n : 쿼리 결과에서 지정된 순서에 위치한 레코드만 가져올 때 사용
COUNT : 레코드의 건수를 반환

JOIN
  INNER JOIN
    SELF JOIN
  OUTER JOIN
    LEFT JOIN
    RIGHT JOIN
    FULL JOIN
    CROSS JOIN
  LETERAL JOIN

GROUP BY WITH ROLLUP : 집계 통계 신

세미 조인 최적화
  테이블 풀-아웃(Table Pull-out)
  퍼스트 매치(Firstmatch)
  루스 스캔(Loosescan)
  구체화(Materializtion)
  중복 제거(Duplicated Weed-out)

안티 세미 조인 최적화
  NOT EXISTS
  구체화(Materializtion)

CTE(Common Table Expression)
  With 
비재귀적 CTE(Non-Recursive CTE)

윈도우 함수
  AVG() : 평균 값 반환
  BIT_AND() : AND 비트 연산 결과 반환
  BIT_OR() : OR 비트 연산 결과 반환
  BIT_XOR() : XOR 비트 연산 결과 반환
  COUNT() : 건수 반환
  JSON_ARRAYAGG() : 결과를 JSON 배열로 반환
  JSON_OBJECTAGG() : 결과를 JSON OBJECT 배열로 반환
  MAX() : 최댓값 반환
  MIN() : 최솟값 반환
  STDDEV_POP(), STDDEV(), STD() : 표준 편차 값 반환
  STDDEV_SAMP() : 표본 표준 편차 값 반환
  SUM() : 합계 값 반환
  VAR_POP(), VARIANCE() : 표준 분산 값 반환
  VAR_SAMP() : 표본 분산 값 반환
  CUME_DIST() : 누적 분포 값 반환(파티션별 현재 레코드보다 작거나 같은 레코드의 누적 백분율)
  DENSE_RANK() : 랭킹 값 반환(Gap 없음) (동일한 값에 대해서는 동일 순위를 부여하며, 동일한 순위가 여러 건이어도 한 건으로 취급)
  FIRST_VALUE() : 파티션의 첫 번째 레코드 값 반환 
  LAG() : 파티션 내에서 파라미터(N)를 이용해 N번째 이전 레코드 값 반환
  LAST_VALUE() : 파티션의 마지막 레코드 값 반환
  LEAD() : 파티션 내에서 파라미터(N)를 이용해 N번째 이후 레코드 값 반환
  NTH_VALUE() : 파티션의 n번째 값 반환
  NTILE() : 파티션별 전체 건수를 파라미터(N)로 N-등분한 값 반환
  PERCENT_RANK() : 퍼센트 랭킹 값 반환
  RANK() : 랭킹 값 반환(Gap 있음)
  ROW_NUMBER() : 파티션의 레코드 순번 반환

잠금을 사용하는 SELECT
  FOR SHARE : SELECT된 레코드에 대해 읽기 잠금을 설정하고 다른 세션에서 해당 레코드를 변경하지 못하게 한다, 읽는 건 가능
  FOR UPDATE : 쓰기 잠금을 설정하고, 다른 트랜젝션에서는 그 레코드를 변경 및 읽기도 수행 못함

NOWAIT & SKIP LOCKED
  
  

INSERT 와 SELECT 의 성능은 균형을 맞춰야한다

INSERT
  IGNORE : 다 무시하고 레코드 처리
  ON DUPLICATE KEY UPDATE : 프라이머리 키나 유니크 인덱스의 중복ㄷ이 발생하면 UPDATE 문장의 역할을 수행
    VALUES() : 8.0.20 이후 버전에서 지원 안함

  LOAD DATA
    대량의 데이터를 테이블에 빠르게 로드하는데 사용되는 명령어
    주로 CSV, TEXT 파일과 같은 외부 파일에서 데이터를 읽어와 테이블에 삽입하는데 활용
  
    단점
      단일 스레드로 실행
      단일 트랜젝션으로 수행
      > 여러 개의 파일로 준비해서 LOAD DATA 문장을 동시에 여러 트랜젝션으로 나뉘어 실행되게 하면 좋다

    성능을 위한 테이블 구조
      대량 INSERT 성능

클러스터링 키 : 데이터를 물리적으로 정렬하는 데 사용되는 키

스키마 조작(DDL)

온라인 DDL 알고리즘
  1. ALGORITHM=INSTANT로 스키마 변경이 가능한지 확인 후, 가능하다면 선택
  2. ALGORITHM=INPLACE로 스키마 변경이 가능한지 확인 후, 가능하다면 선택
  3. ALGORITHM=COPY 알고리즘 선택

  스키마 변경 알고리즘의 우선 순위가 낮을수록 MySQL 서버는 스키마 변경을 위해서 더 큰 잠금과 많은 작업을 필요로 하고 서버의 부하도 많이 발생

  INSTANT : 테이블의 데이터는 전혀 변경하지 않고, 메타데이터만 변경하고 작업을 완료, 테이블이 가진 레코드 건수와 무관하게 작업 시간은 매우 짧다
  INPLACE : 임시 테이블로 데이터를 복사하지 않고 스키마 변경을 실행, 내부적으로는 테이블의 리빌드를 실행할 수도 있다 레코드의 복사 작업은 없으나 모든 레코드를 리빌드해야하기 때문에 테이블에 따라 많은 시간이 소요될 수 있다
  COPY : 변경된 스키마를 적용한 임시 테이블을 생성하고, 테이블의 레코드를 모두 임시 테이블로 복사한 후 최종적으로 임시 테이블을 RENAME해서 스키마 변경을 완료, 이 방법은 읽기만 가능하고 DML(INSERT, UPDATE, DELETE)은 실행할 수 없다
  

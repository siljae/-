##### 아키텍처


MySQL 엔진 아키텍처
  MySQL 서버 : MySQL 엔진 + 스토리지 엔진

MySQL 엔진
   커넥션 핸들러 : 클라이언트로부터 접속 및 쿼리 요청을 처리
   옵티마이저 : SQL 파서 및 전처리기, 쿼리의 최적화된 실행
   표준 SQL(ANSI SQL) 문법 지원
   > 요청된 SQL 문장을 분석, 최적화 등 DBMS의 두뇌에 해당하는 처리를 수행

스토리지 엔진
  실제 데이터를 디스크 스토리지에 저장하거나 디스크 스토리지로부터 데이터를 읽어오는 부분
  MySQL 서버에서 MySQL 엔진은 하나지만 스토리지 엔진은 여러 개를 동시에 사용 가능

핸들러 API
  MySQL 엔진의 쿼리 실행기에서 데이터를 쓰거나 읽어야 할 때는 각 스토리지 엔진에 쓰기 또는 읽기를 요청하는데, 이러한 요청을 핸들러(Handler) 요청

MySQL 스레딩 구조
  프로세스 기반이 아니라 스레드 기반으로 작동
  
  포그라운드(Foreground)
    최소한 MySQL 서버에 접속된 클라이언트의 수만큼 존재
    각 클라이언트가 사용자가 요청하는 쿼리 문장 처리
    포그라운드 스레드 = 사용자 스레드
    
  백그라운드(Background)
    DB의 백업, 저기 작업 수행, 스레드 관리(로그 스레드, 쓰기 스레드가 중요)

  플러그인 스토리지 엔진 모델
    다양한 스토리지 엔진을 필요에 따라 추가 또는 제거, 사용자 특정 요구에 맞는 기능 선택 구조

  컴포넌트
     데이터베이스 기능을 확장하거나 특정 작업을 수행하기 위해 독립적으로 설치 및 구성할 수 있는 모듈로, 유연성과 확장성을 제공

InnoDB 스토리지 엔진 아키텍처
  MySQL 엔진 : SQL 옵티마이저, SQL 실행기
  메모리
    InnoDB 스토리지 엔진 : 어댑티브 해시 인덱스, 언두 페이지, 체인지 버퍼, 데이터 페이지 버퍼
    로그 버퍼
  CPU
    백그라운드 스레드 : 체인지 버퍼 머지 스레드, 데이터 페이지 기록 스레드, 로그 기록 스레드
  디스크
    디스크 : 데이터 파일, 트랜젝션 로그 파일

프라이머리 키에 의한 클러스터링
  프라이머리 키 값의 순서대로 디스크에 저장
  모든 세컨더리 인덱스는 레코드의 주소 대신 프라이머리 키의 값을 논리적인 주소로 사용

MVCC(Multi Version Concurrency Control)
  데이터베이스에서 여러 트랜잭션이 동시에 수행될 때, 각 트랜잭션이 데이터의 일관성을 유지하면서도 독립적으로 작업할 수 있도록 여러 버전의 데이터를 관리하는 기법

격리 수준
  격리 수준(Isolation Level)은 데이터베이스 트랜잭션이 서로 독립적으로 수행될 수 있는 정도를 정의하는 설정

언두 영역(Undo Area)
   데이터베이스에서 트랜잭션이 실행되기 전의 이전 상태를 저장하는 메모리 공간, 이 영역은 트랜잭션이 롤백될 때 데이터를 복원하는 데 사용

 언두 로그(Undo Log)
   언두 영역에서의 변경 사항을 기록한 로그, 트랜잭션이 수행되는 동안 변경된 데이터가 언두 로그에 기록되며, 이 로그를 통해 트랜잭션이 실패하거나 롤백될 경우 데이터의 이전 상태로 복원
   
* 트랜젝션이란?
    데이터베이스에서 수행되는 하나의 작업 단위로, 여러 개의 데이터베이스 연산을 포함, 트랜잭션의 주요 특징은 ACID 속성을 따르는 것
    + 원자성(Atomicity): 트랜잭션 내의 모든 작업이 성공적으로 완료되거나, 하나라도 실패하면 전체가 롤백되어야 함
    + 일관성(Consistency): 트랜잭션이 완료되면 데이터베이스가 일관된 상태를 유지해야 함
    + 격리성(Isolation): 동시에 실행되는 트랜잭션들이 서로 영향을 미치지 않아야 함
    + 지속성(Durability): 트랜잭션이 성공적으로 완료되면 그 결과는 영구적으로 저장되어야 함
